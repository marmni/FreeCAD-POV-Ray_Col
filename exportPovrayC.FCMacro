import FreeCAD, FreeCADGui
import __builtin__
import Mesh
from PySide import QtCore, QtGui
import os


def meshFace(shape):
    faces = []
    triangles = shape.tessellate(1) # the number represents the precision of the tessellation
    for tri in triangles[1]:
        face = []
        for i in range(3):
            vindex = tri[i]
            face.append(triangles[0][vindex])
        faces.append(face)
    m = Mesh.Mesh(faces)
    #Mesh.show(m)
    return m


def exportToPOVRAY(fileName, projectObjects):
    outPutString = ""
    #
    for i in projectObjects:  # objects in document
        try:
            objectColors = i.ViewObject.DiffuseColor
            shape = i.Shape.Faces
        except:
            continue
        
        if len(i.Shape.Faces) == 0:
            continue
        
        outPutString += "mesh2 {\n"
        ##################
        indexList = []
        vertexList = []
        colorsDeclaration = {}
        nr = 0
        for j in range(len(i.Shape.Faces)):
            # get face color
            if len(objectColors) == len(i.Shape.Faces):
                modelType = objectColors[j]
            else:
                modelType = objectColors[0]
            
            if not modelType in colorsDeclaration:
                colorsDeclaration[modelType] = []
            ######
            mesh = meshFace(i.Shape.Faces[j])

            for pp in mesh.Facets:
                colorsDeclaration[modelType].append(nr)
                nr += 1
                
                num = len(vertexList)
                for kk in pp.Points:
                    vertexList.append("\t<{0}, {1}, {2}>".format(kk[0], kk[1], -kk[2]))
                indexList.append([num, num + 1, num + 2])
        #
        outPutString += "vertex_vectors {\n"
        outPutString += "\t{0},\n".format(len(vertexList))
        outPutString += (',\n').join(vertexList)
        outPutString += "\n}\n\n"
        ##################
        outPutString += "texture_list {\n"
        outPutString += "\t{0},\n".format(len(colorsDeclaration.keys()))
        
        for j in colorsDeclaration.keys():
            outPutString += "\ttexture{pigment{rgb <%.2f, %.2f, %.2f>}}\n" % (j[0], j[1], j[2])
        
        outPutString += "}\n"
        ##################
        outPutString += "face_indices {\n"
        outPutString += "\t{0},\n".format(len(vertexList) / 3)
        for i in range(len(indexList)):
            faceColor = [k for k, l in colorsDeclaration.items() if i in l]
            faceColor = colorsDeclaration.keys().index(faceColor[0])
            outPutString += "\t<{0}, {1}, {2}>, {3}, \n".format(indexList[i][0], indexList[i][1], indexList[i][2], faceColor)
        
        outPutString += "}\n"
        ##################
        outPutString += "\n}\n"

    plik = __builtin__.open(fileName, "w")
    plik.write('''     // Persistence of Vision Ray Tracer Scene Description File
    // for FreeCAD (http://www.freecadweb.org)

    #version 3.6;

    #include "colors.inc"
    #include "metals.inc"
    #include "rad_def.inc"

    global_settings {
        radiosity {
            Rad_Settings(Radiosity_Normal,off,off)
        }
    }

    #default {finish{ambient 0}}

    sky_sphere {
        pigment {
            gradient y
            color_map {
                [0.0  color LightGray]
                [0.3  color White]
                [0.7  color LightGray]
            }
        }
    }

    // Standard finish
    #declare StdFinish = finish { crand 0.01 diffuse 0.8 };

// declares positon and view direction
''')
    cam = FreeCADGui.ActiveDocument.ActiveView.getCameraNode()
    camPos = cam.position.getValue()
    Cx = "%.4f" % (camPos[0] * 10)
    Cy = "%.4f" % (camPos[1] * 10)
    Cz = "%.4f" % (camPos[2] * 10)
    
    center = Part.makeCompound([i.Shape for i in projectObjects if hasattr(i, "Shape")]).BoundBox.Center
    
    plik.write(''' // Generated by FreeCAD (http://www.freecadweb.org/)
#declare cam_location =  <%s, %s, %s>;
#declare cam_look_at  = <%s, %s, %s>;
#declare cam_sky      = <0.0195184,0.679088,0.733797>;
#declare cam_angle    = 45; 
camera {
  location  cam_location
  look_at   cam_look_at
  sky       cam_sky
  angle     cam_angle 
  right x*800/600
}
// Written by FreeCAD http://www.freecadweb.org/
''' % (Cx, Cy, Cz, center[0], center[1], center[2]))

    plik.write(outPutString + "\n")
    plik.write('''//default light
    light_source {
        cam_location
        color White
        area_light <100, 0, 0>, <0, 0, 100>, 10, 10
        adaptive 1
        jitter
    }
    ''')
    plik.close()



class exportToPovrayColorsGui(QtGui.QWidget):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        #
        self.form = self
        self.form.setWindowTitle(u"Export to Povray with colors")
        #
        tab = QtGui.QTabWidget()
        tab.addTab(self.tabGeneral(), u'General')
        #
        lay = QtGui.QVBoxLayout(self)
        lay.addWidget(tab)
        #
    
    def tabGeneral(self):
        self.patherror = QtGui.QLabel('')
        
        self.filePath = QtGui.QLineEdit('')
        self.connect(self.filePath, QtCore.SIGNAL("textChanged (const QString&)"), self.changePathFInfo)
        self.filePath.setText(os.path.join(os.path.expanduser("~"), 'Unnamed.pov'))
        self.filePath.setReadOnly(True)

        changePath = QtGui.QPushButton('...')
        changePath.setFixedWidth(30)
        self.connect(changePath, QtCore.SIGNAL("clicked ()"), self.changePathF)

        generalBox = QtGui.QGroupBox(u'General')
        generalBoxLay = QtGui.QGridLayout(generalBox)
        generalBoxLay.addWidget(QtGui.QLabel(u'Path           '), 0, 0, 1, 1)
        generalBoxLay.addWidget(self.filePath, 0, 1, 1, 2)
        generalBoxLay.addWidget(changePath, 0, 3, 1, 1)
        generalBoxLay.addWidget(self.patherror, 1, 0, 1, 4)

        generalBoxLay.setColumnStretch(1, 10)
        #
        self.exportObjects_All = QtGui.QRadioButton(u'All visible objects')
        self.exportObjects_All.setChecked(True)
        self.exportObjects_Selected = QtGui.QRadioButton(u'All selected objects')
        self.exportObjects_SelectedFaces = QtGui.QRadioButton(u'All selected faces')
        self.exportObjects_SelectedFaces.setDisabled(True)
        
        exportObjectsBox = QtGui.QGroupBox(u'Export objects')
        exportObjectsBoxLay = QtGui.QVBoxLayout(exportObjectsBox)
        exportObjectsBoxLay.addWidget(self.exportObjects_All)
        exportObjectsBoxLay.addWidget(self.exportObjects_Selected)
        exportObjectsBoxLay.addWidget(self.exportObjects_SelectedFaces)
        #####
        widget = QtGui.QWidget()
        lay = QtGui.QGridLayout(widget)
        lay.addWidget(generalBox, 0, 0, 1, 4)
        lay.addWidget(separator(), 1, 0, 1, 4)
        lay.addWidget(exportObjectsBox, 2, 0, 1, 4)
        lay.setRowStretch(10, 10)
        return widget
    
    def changePathFInfo(self):
        if os.path.exists(self.filePath.text()):
            self.patherror.setText('<span style="font-weight:bold; color: red;">You will overwrite existing file!</span>')
        else:
            self.patherror.setText('')
        
    def changePathF(self):
        path = QtGui.QFileDialog().getSaveFileName(self, u"Save as", os.path.expanduser("~"), "*.pov")

        fileName = path[0]
        if not fileName == "":
            if not fileName.endswith('pov'):
                fileName = fileName + '.pov'
            self.filePath.setText(fileName)
            self.changePathFInfo()
    
    def accept(self):
        if self.exportObjects_All.isChecked():
            projectObjects = [i for i in FreeCAD.ActiveDocument.Objects if i.ViewObject.Visibility]
        elif self.exportObjects_Selected.isChecked():
            projectObjects = []
            for i in FreeCADGui.Selection.getSelection():
                if i.ViewObject.Visibility and i not in projectObjects:
                    projectObjects.append(i)
        
        if len(projectObjects) == 0:
            FreeCAD.Console.PrintWarning("No objects found\n")
            return
        #
        exportToPOVRAY(self.filePath.text(), projectObjects)
    

class separator(QtGui.QFrame):
    def __init__(self, parent=None):
        QtGui.QFrame.__init__(self, parent)
        #
        self.setFrameShape(QtGui.QFrame.HLine)
        self.setFrameShadow(QtGui.QFrame.Sunken)
        self.setLineWidth(1)


if FreeCAD.activeDocument():
    FreeCADGui.Control.showDialog(exportToPovrayColorsGui())